You are improving a production-ready Flask + SQLite + Bootstrap 5 website for “Nawarat Thai Mat og Catering” (Norwegian language). The site is functional but feels chaotic. Your job: refactor and redesign for maximum usability, professionalism, and visual polish—without adding e‑commerce. Keep Norwegian copy, keep Flask/SQLite, keep menu items 01–17 and existing catering packages, keep the admin at /admin/login. Use your best judgment and implement changes directly.

Context & non‑negotiables
Tech: Flask (Jinja), SQLite, Bootstrap 5 (+ custom CSS). Norwegian language only.

Pages: Hjem, Meny (01–17 med ekte bilder), Catering (Menyforslag 1–6), Kontakt, Admin.

Business goals: drive catering-forespørsler (B2B), make meny easy to scan, ensure Google discoverability for “Nawarat thai mat” and “Gjøvik kafe og catering.”

Do not add cart/checkout. Display site only.

Keep allergen info and images. Keep admin auth “Nawarat”.

High-level goals
Information architecture: clear, predictable navigation; fewer distractions; obvious primary action (catering-forespørsel).

Visual design: cohesive color system, spacing scale, responsive type, consistent cards and sections; real-restaurant vibe (warm, authentic).

Performance: great Lighthouse (≥90 on mobile), fast image loading.

Accessibility: WCAG 2.2 AA contrast, keyboard nav, proper semantics.

SEO/Local: structured data, on-page SEO, fast/mobile-friendly.

Owner UX: admin flows simple, safe, and resilient.

Deliverables (make these changes in code)
Design system

Introduce CSS variables in a single file, e.g. static/css/theme.css:

Colors: --brand-600, --brand-800, --accent, neutrals, success/warning.

Type scale (use clamp()): base ~18–20px mobile, scale headings sensibly.

Spacing scale: --space-1…--space-8 with consistent vertical rhythm.

Rounded corners and shadows tokens for cards/modals.

Replace ad‑hoc styles with variables/utilities. Remove dead CSS.

Layout & components

Create a master Jinja layout templates/_layout.html with:

Semantic header (skip link), accessible Navbar, footer with opening hours, address, click‑to‑call.

Global sticky CTA button “Få cateringtilbud” visible on mobile.

Extract partials: templates/_nav.html, _footer.html, _hero.html, _dish-card.html, _package-card.html, _alert.html.

Use consistent cards for dishes and catering packages: image on top, title, short description, allergens badges, CTA (copy or “Forespør tilbud” when relevant).

Improve mobile nav: clear categories, large tap targets, highlight current page.

Homepage

Calm hero with one sentence value prop + subtext + primary CTA to Catering, secondary link to Meny.

“Populære retter” (3–6) and “Catering: Derfor velger bedrifter oss” with 3 bullet benefits.

Trust: real photos, short testimonial block (owner-editable).

Meny page

Keep numbering 01–17 exactly. Show chips for allergens and category.

Add filters (client-side): “Alle”, “Hovedretter”, “Ekstra”, “Drikker”; and a text search.

Responsive image handling: use srcset and WebP with lazy loading; keep original filenames but generate WebP on upload (see Admin below).

Catering page

Show Menyforslag 1–6 as uniform cards with price per person, min. pax, what’s included, and a “Få tilbud” CTA that opens a short form modal (name, firma, antall personer, dato, telefon, e‑post, fritekst).

Add an “ofte stilte spørsmål” accordion (delivery area, allergener, leveringstid).

Kontakt page

Click‑to‑call, mailto, embedded map, opening hours (structured data), parking info.

Admin improvements

Keep /admin/login. Add:

Safer password hashing (Werkzeug) if not already; rate limit login; CSRF on forms.

Simple WYSIWYG (sanitized) for descriptions. Sanitize HTML with bleach.

Image upload pipeline: on upload, store original + generate WebP and thumbnails; ask for alt‑tekst; store in DB; output srcset.

Reorder menu items via drag‑and‑drop; edits never break 01–17 numbering.

Publish/unpublish toggles; schedule seasonal specials.

Automatic daily SQLite backup to /backups (timestamped).

Code quality

Use Flask Blueprints: main, admin, api if needed. Clean routes, type hints, docstrings.

Template structure under templates/ with partials; remove duplication.

Add basic tests for routes returning 200 and forms validation.

Accessibility

Landmarks, headings order, labels for all inputs, focus styles, skip link.

Contrast ≥ 4.5:1 for text. Alt text required on images.

Keyboard-only navigation and esc to close modals.

Performance

Lazy-load all non-critical images (loading="lazy").

Preload primary font; use system fonts unless you can keep CLS ~0.

Defer non-critical JS; minify CSS/JS; set cache headers for static.

Compress (gzip/brotli) if server config is present; otherwise note in README.

SEO/Local

Unique <title> + meta descriptions per page (Norwegian).

JSON-LD: Restaurant + LocalBusiness with address, phone, hours; Menu for dishes; Product/Offer for catering packages (price per person).

Image alt attributes; Open Graph/Twitter meta; canonical tags.

Generate sitemap.xml and robots.txt. Add hreflang=no (single language).

Content microcopy (Norwegian tone)

Short, friendly, professional. Replace jargon with plain language.

Buttons: “Se meny”, “Få cateringtilbud”, “Ring nå”, “Send forespørsel”.

Error/empty states that guide the user (“Ingen treff – prøv et annet søk.”).

Database & schema (keep tables, add fields if needed)
Keep menu_items, restaurant_info, users.

Add optional fields:

menu_items.alt_text, menu_items.is_published, menu_items.position.

catering_packages.is_published, catering_packages.min_pax, catering_packages.features (JSON).

media table if helpful: original_path, webp_path, width, height, alt_text, created_at.

Provide a safe migration script for SQLite and back up first.

Example technical specifics to implement
Template: menu.html uses _dish-card.html with consistent markup, badges for allergens, and srcset using WebP + fallback JPEG.

Sticky CTA: bottom-right FAB on mobile: “Få cateringtilbud” → modal form → POST to /catering/foresporsel.

Form validation: server-side + HTML5; success/failure alerts with _alert.html.

Rate limiting: simple in‑memory limiter for /admin/login (e.g., 5 attempts/15 min/IP).

Security headers: set CSP (allow self + maps), HSTS if HTTPS, and no‑sniff, frame‑ancestors none for admin.

Acceptance criteria (checklist)
Pages render clean, balanced whitespace, consistent cards, and readable type on mobile (base 18–20px).

Mobile Lighthouse: ≥90 Performance, ≥90 Accessibility, ≥90 Best Practices, ≥90 SEO.

Keyboard nav works everywhere; visible focus.

Menu items remain numbered 01–17 exactly; catering packages remain 1–6.

Images load fast (WebP + lazy).

Sticky catering CTA present on mobile, not annoying on desktop.

sitemap.xml, robots.txt, JSON‑LD valid (test in Google Rich Results).

Admin can upload images, set alt text, publish/unpublish, and reorder items.

Daily SQLite backups created.

What to output
Updated code (templates, static assets, blueprints, forms, migrations).

A short README: how to run, how image pipeline works, how to back up/restore DB, how to manage menu/catering, and how to verify SEO/structured data.

A brief change log and a list of any manual steps (e.g., set up cron for backups).

Go ahead and implement all of the above. If you must make tradeoffs, prioritize: IA clarity → mobile UX → performance → accessibility → SEO → admin UX → aesthetics. Use your judgment to make the site feel calm, premium, and trustworthy.